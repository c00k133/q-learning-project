# Check that the build does not happen in the source tree
IF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
    MESSAGE("src dir: ${CMAKE_SOURCE_DIR}\tbinary dir: ${CMAKE_BINARY_DIR}")
    MESSAGE(FATAL_ERROR "Prevented in-tree build. This is bad practice.")
ENDIF(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})

# Project wide settings
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.8)
PROJECT(q-learning)

IF(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
    SET(CMAKE_BUILD_TYPE Debug)
    MESSAGE("* Default to build type: ${CMAKE_BUILD_TYPE}")
ELSE()
    message("* Build type: ${CMAKE_BUILD_TYPE}")
ENDIF(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")

# Check tool versions, initialize to defaults
SET(COMPILER_VERSION 0.0.0)

STRING(REGEX MATCH "[0-9]\\.[0-9]\\.[0-9]" COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION})
IF(${CMAKE_COMPILER_IS_GNUCXX} AND ${COMPILER_VERSION} VERSION_GREATER 4.8.1)
    MESSAGE("* Compiler version is supported")
ELSE()
    MESSAGE(FATAL_ERROR "* Compiler is not supported (needs at least g++ 4.8.1)")
ENDIF(${CMAKE_COMPILER_IS_GNUCXX} AND ${COMPILER_VERSION} VERSION_GREATER 4.8.1)

# Set common compiler and linker flags
ADD_DEFINITIONS(-fopenmp)
ADD_DEFINITIONS(-std=c++11)
ADD_DEFINITIONS(-Wall)

# Per build type flags
IF(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    ADD_DEFINITIONS(-O3)
    ADD_DEFINITIONS(-fno-keep-static-consts)
    ADD_DEFINITIONS(-mtune=native)
ENDIF(${CMAKE_BUILD_TYPE} STREQUAL "Release")

IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    ADD_DEFINITIONS(-Og)
    ADD_DEFINITIONS(-finline-functions-called-once)
    ADD_DEFINITIONS(-W)
    ADD_DEFINITIONS(-Wextra)
    ADD_DEFINITIONS(-pedantic)
    ADD_DEFINITIONS(-Wno-unused-function)
ENDIF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")

# Find SFML
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")

SET(CMAKE_MODULE_PATH  "${PROJECT_SOURCE_DIR}/libs")
FIND_PACKAGE(SFML REQUIRED system window graphics network audio)
IF(SFML_FOUND)
    INCLUDE_DIRECTORIES(${SFML_INCLUDE_DIR})
ENDIF()

# Set some directory variables
SET(BOT_DIR "bot")
SET(WORLD_DIR "world")
SET(TEST_DIR "test")
SET(BOX2D_DIR "libs/Box2D")
SET(SFML_DIR "sfml")
SET(EXCEPTIONS_DIR "exceptions")
SET(QLEARN_DIR "qlearn")

# Add all directories
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/${QLEARN_DIR}")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/${SFML_DIR}")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/${EXCEPTIONS_DIR}")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/${BOT_DIR}")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/${WORLD_DIR}")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/${BOX2D_DIR}")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/${TEST_DIR}")

ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/${QLEARN_DIR}")
ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/${SFML_DIR}")
ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/${EXCEPTIONS_DIR}")
ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/${BOX2D_DIR}")
ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/${BOT_DIR}")
ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/${WORLD_DIR}")
ADD_SUBDIRECTORY("${PROJECT_SOURCE_DIR}/${TEST_DIR}")

LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/${QLEARN_DIR}")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/${SFML_DIR}")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/${EXCEPTIONS_DIR}")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/${BOX2D_DIR}")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/${BOT_DIR}")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/${WORLD_DIR}")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/${TEST_DIR}")

ENABLE_TESTING()
